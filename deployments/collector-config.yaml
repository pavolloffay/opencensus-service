log-level: INFO
receivers:
  zipkin: {}
  jaeger: {}
  opencensus:
    keepalive:
      server-parameters:
        max-connection-age: 120s
        max-connection-age-grace: 30s
queued-exporters:
  jaeger:
    # num-workers is the number of queue workers that will be dequeuing batches and sending them out (default is 10)
    # num-workers: 10

    # queue-size is the maximum number of batches allowed in the queue at a given time (default is 5000)
    # queue-size: 5000

    # retry-on-failure indicates whether queue processor should retry span batches in case of processing failure (default is true)
    # retry-on-failure: true

    # backoff-delay is the amount of time a worker waits after a failed send before retrying (default is 5 seconds)
    # backoff-delay: 5s

    # sender-type is the type of sender used by this processor
    sender-type: jaeger-thrift-http

    jaeger-thrift-http:
      collector-endpoint: "https://api.aws.traceable.ai:14268/api/traces"
      timeout: 5s
      iam-endpoint: "api.traceable.ai:443"
global:
  attributes:
    enduser:
      ######################################################
      ### This example will extract enduser information from
      ### a JWT sent as an autorization header
      # - key: http.request.header.authorization
      #   # authheader type can be either bearer or basic
      #   type: authheader
      #   encoding: jwt
      #   # claims containing the enduser id
      #   id_claims:
      #     - sub
      #   # claims containing the enduser roles
      #   role_claims:
      #     - role
      #   # claims containing the enduser scope
      #   scope_claims:
      #     - scope
      ######################################################
      ### This example will extract enduser information from
      ### a JWT sent in the cookie named token
      # - key: http.request.header.cookie
      #   type: cookie
      #   cookie_name: token
      #   encoding: jwt
      #   # claims containing the enduser id
      #   id_claims:
      #     - sub
      #   role_claims:
      #     - role
      #   # claims containing the enduser scope
      #   scope_claims:
      #     - scope
      ######################################################
      ### This example will extract enduser information from
      ### the json response (below) of a login endpoint.
      # {
      #   "user": {
      #     "id": "",
      #     "role": {
      #      ...
      #     },
      #     "scope": "",
      #   },
      #   "token": ""
      # }
      # - key: http.response.body
      #   type: json
      #   id_paths:
      #   - $.user.id
      #   role_paths:
      #   - $.user.role
      #   scope_paths:
      #   - $.user.scope
      #   # path to token used to identify a session
      #   session_paths:
      #   - $.token
      #   conditions:
      #     - key: http.url
      #       regex: \/login
    pii-filter:
      redaction-strategy: redact
      modsec-config:
        config-dir: "/"
        file-name: "modsecurity-detector.conf"
      prefixes:
        - http.request.header.
        - http.response.header.
        - rpc.request.metadata.
        - rpc.response.metadata.
      complex-data:
        - key: http.response.header.set-cookie
          type: cookie
        - key: http.request.header.cookie
          type: cookie
        - key: http.response.body
          type-key: http.response.header.content-type
        - key: http.request.body
          type-key: http.request.header.content-type
        - key: rpc.response.body
          type: json
        - key: rpc.request.body
          type: json
        - key: sql.query
          type: sql
        - key: http.url
          type: urlencoded
      key-regexs:
        - regex: ^authorization(\[\d+\])?$
          category: auth
          redaction-strategy: hash
          session-identifier: true
        - regex: ^remember_token(\[\d+\])?$
          category: auth
          redaction-strategy: hash
          session-identifier: true
        - regex: ^session(\[\d+\])?$
          category: auth
          redaction-strategy: hash
          session-identifier: true
        - regex: ^access_token(\[\d+\])?$
          category: auth
        - regex: ^api_key(\[\d+\])?$
          category: auth
        - regex: ^apikey(\[\d+\])?$
          category: auth
        - regex: ^password(\[\d+\])?$
          category: auth
        - regex: ^passwd(\[\d+\])?$
          category: auth
        - regex: ^secret(\[\d+\])?$
          category: auth
